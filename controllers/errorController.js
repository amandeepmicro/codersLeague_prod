const AppError = require('./../utils/appError');

///////////// Production Environment Error Handling /////////////////
const handleCastErrorDB = err => {
   const message = `Invalid ${err.path}: ${err.value}.`;
   return new AppError(message, 400);
};
const handleDuplicateFieldsDB = err => {
   const value = err.message.match(/(["'])(\\?.)*?\1/)[0];

   const message = `Duplicate field value: ${value}. Please use another value!`;
   return new AppError(message, 400);
};
const handleValidationErrorDB = err => {
   const errors = Object.values(err.errors).map(el => el.message);

   const message = `Invalid input data. ${errors.join('. ')}`;
   return new AppError(message, 400);
};
const handleJWTError = err => {
   return new AppError('Invalid token. Please login again!', 401);
}
const handleTokenExpiredError = err => {
   return new AppError('Your token has expired! Please login again!', 401);
}
const sendErrorProd = (err, res) => {
   // A) API
   if (req.originalUrl.startsWith('/api')) {
      // a) Operational, trusted error/generated by us: send message to client
      if (err.isOperational) {
         return res.status(err.statusCode).json({
            status: err.status,
            message: err.message
         })
      }
      // b) Programming or other unknown error: don't leak error details
      // 1) Log error
      console.error('ERROR IN API ðŸ’¥', err);
      // 2) Send generic message
      return res.status(500).json({
         status: 'error',
         message: 'Something went very wrong!'
      });
   }

   // B) APP 
   // a) Operational, trusted error/generated by us: send message to client
   if (err.isOperational) {
      return res.status(err.statusCode).json({
         status: err.status,
         message: err.message
      })
   }
   // b) Programming or other unknown error: don't leak error details 
   // 1) Log error
   console.log('ERROR ðŸ’¥', err);
   // 2) Send generic message
   return res.status(500).json({
      status: 'error',
      message: 'Something went wrong! Please try again later.'
   })

}

///////////// Development Environment Error Handling /////////////////
const sendErrorDev = (err, res) => {
   return res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
      err: err,
      stack: err.stack
   })
}

module.exports = ((err, req, res, next) => {
   // 500 is internal server error
   err.statusCode = err.statusCode || 500;
   err.status = err.status || 'error'


   if (process.env.NODE_ENV === 'development') {
      sendErrorDev(err, res);
   } else if (process.env.NODE_ENV === 'production') {
      console.log('Original Error: ', err)
      let error = { ...err, name: err.name, message: err.message };
      // console.log('Modified Error: ', error)
      // A) Depending on the error type we modify it 
      if (error.name === 'CastError') error = handleCastErrorDB(error);
      if (error.code === 11000) error = handleDuplicateFieldsDB(error);
      if (error.name === 'ValidationError') error = handleValidationErrorDB(error);
      if (error.name === 'JsonWebTokenError') error = handleJWTError(error);
      if (error.name === 'TokenExpiredError') error = handleTokenExpiredError(error);
      // B) and return it to client
      sendErrorProd(error, res);
   }

}) 